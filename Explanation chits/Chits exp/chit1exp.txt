1. Function Definitions
1.1 createSet(l1)
•	Takes a list l1 as input.
•	Converts the list to a set and returns the set.
1.2 createGrp(grpName="Noname")
•	Takes an optional parameter grpName with a default value of "Noname."
•	Prompts the user to input the number of members in a group (n).
•	Iterates n times to get member names/id from the user and appends them to a list members.
•	Calls createSet to convert the list of members to a set and returns the set.
1.3 menu(ch)
•	Takes a parameter ch representing the choice.
•	Returns a menu option based on the choice.
1.4 printMenu()
•	Prints the menu options by iterating over the choices from 1 to 5.
1.5 intersection(s1, s2)
•	Takes two sets s1 and s2 as input.
•	Finds the intersection of the two sets and returns the result.
1.6 union(s1, s2)
•	Takes two sets s1 and s2 as input.
•	Calls intersection to find the intersection of the sets.
•	Computes the union of the sets and returns the result.
1.7 difference(s1, s2)
•	Takes two sets s1 and s2 as input.
•	Finds the difference between s1 and s2 and returns the result.
2. Group Creation
•	Creates three groups: cricket, badminton, and football using the createGrp function.
•	Prints the members of each group.
3. Menu Interaction
•	Enters a loop to interact with the user until the user chooses to exit (option 5).
•	Prints the menu using printMenu().
4. Menu Options
4.1 Option 1
•	Finds the intersection of the cricket and badminton sets and prints the result.
4.2 Option 2
•	Finds the union and intersection of the cricket and badminton sets.
•	Prints the difference between the union and intersection.
4.3 Option 3
•	Finds the union of the cricket and badminton sets.
•	Finds the difference between the football set and the union.
•	Prints the count and members of the resulting set.
4.4 Option 4
•	Finds the intersection of the cricket and football sets.
•	Finds the difference between the intersection and the badminton set.
•	Prints the count and members of the resulting set.
5. Else Clause
•	Handles invalid choices.
6. Exit
•	Breaks out of the loop if the user chooses option 5.
Note:
•	There is a mistake in the intersection function. Instead of inter.update(i), it should be inter.add(i) since update is used for merging two sets.
•	The code assumes that the user always inputs valid integers for choices, which might not always be the case in a real-world scenario.
•	The code could benefit from better variable names and more comments to improve readability.


Algortihm:
1. Define a function createSet(l1) that takes a list l1 as input and returns a set t containing the elements of l1.
2. Define a function createGrp(grpName) that takes a string grpName as input and returns a set members containing the names of the members of the group.
3. Define a function menu(ch) that takes an integer ch as input and returns a string corresponding to the menu option.
4. Define a function printMenu() that prints the menu options.
5. Define a function intersection(s1, s2) that takes two sets s1 and s2 as input and returns a set containing the intersection of s1 and s2.
6. Define a function union(s1, s2) that takes two sets s1 and s2 as input and returns a set containing the union of s1 and s2.
7. Define a function difference(s1, s2) that takes two sets s1 and s2 as input and returns a set containing the difference of s1 and s2.
8. Create a set cricket using the createGrp() function.
9. Create a set badminton using the createGrp() function.
10. Create a set football using the createGrp() function.
11. Print the menu options using the printMenu() function.
12. Take input from the user for the menu option.
13. If the user selects option 1, find the intersection of cricket and badminton using the intersection() function and print the result.
14. If the user selects option 2, find the difference of the union of cricket and badminton and the intersection of cricket and badminton using the difference() function and print the result.
15. If the user selects option 3, find the difference of the union of cricket, badminton, and football and the intersection of cricket, badminton, and football using the difference() function and print the result.
16. If the user selects option 4, find the difference of the intersection of cricket and football and badminton using the difference() function and print the result.
17. If the user selects option 5, exit the program.
